generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== AUTH & USER MGMT ==========

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  phone         String?
  role          Role
  verifyCode    String?
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  tokens        Token[]
  medicalRecord MedicalRecord[]
  appointments  Appointment[]
  testResults   TestResult[]
  notifications Notification[]
  payments      Payment[]
  doctor        Doctor?
  reviews       Review[]
}

model Profile {
  id         String    @id @default(uuid())
  userId     String    @unique
  gender     String?
  dob        DateTime?
  address    String?
  picture   String?
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String
  type      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========== DOCTOR MGMT ==========

model Doctor {
  id             String           @id @default(uuid())
  userId         String           @unique
  specialization String[]
  qualifications String[]
  ratings        Float?
  about          String?
  price          Float
  reviews        Review[]
  availability   Availability[]
  affiliations   DoctorHospital[]
  appointments   Appointment[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  noOfPatients  Int @default(0)
}

model DoctorHospital {
  id         String   @id @default(uuid())
  doctorId   String
  hospitalId String
  doctor     Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  @@unique([doctorId, hospitalId])
}

model Review {
  id        String   @id @default(uuid())
  doctorId  String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Availability {
  id        String  @id @default(uuid())
  doctorId  String
  day       String
  startTime String
  endTime   String
  doctor    Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  lab       Lab?    @relation(fields: [labId], references: [id])
  labId     String?
}

// ========== HOSPITAL/LAB MGMT ==========

model Hospital {
  id          String           @id @default(uuid())
  name        String
  departments String[]
  facilities  String[]
  services    String[]
  hours       String
  locationId  String
  location    Location         @relation(fields: [locationId], references: [id])
  doctors     DoctorHospital[]
  labs        Lab[]
}

model Lab {
  id           String         @id @default(uuid())
  hospitalId   String
  name         String
  services     String[]
  locationId   String
  availability Availability[]
  location     Location       @relation(fields: [locationId], references: [id])
  tests        MedicalTest[]
  hospital     Hospital       @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

// ========== LOCATION ==========

model Location {
  id        String     @id @default(uuid())
  lat       Float
  lng       Float
  address   String
  profiles  Profile[]
  hospitals Hospital[]
  labs      Lab[]
}

// ========== APPOINTMENTS ==========

model Appointment {
  id            String            @id @default(uuid())
  userId        String
  doctorId      String?
  labId         String?
  testId        String?
  status        AppointmentStatus
  scheduledAt   DateTime
  rescheduledAt DateTime?
  cancelledAt   DateTime?
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor        Doctor?           @relation(fields: [doctorId], references: [id])
  lab           Lab?              @relation(fields: [labId], references: [id])
  test          MedicalTest?      @relation(fields: [testId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

// ========== MEDICAL TESTS ==========

model MedicalTest {
  id           String        @id @default(uuid())
  name         String
  category     String
  price        Float
  homeSample   Boolean
  labId        String
  lab          Lab           @relation(fields: [labId], references: [id], onDelete: Cascade)
  results      TestResult[]
  appointments Appointment[]
}

model TestResult {
  id       String      @id @default(uuid())
  userId   String
  testId   String
  result   String
  issuedAt DateTime
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  test     MedicalTest @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// ========== NOTIFICATIONS ==========

model Notification {
  id        String            @id @default(uuid())
  userId    String
  type      AppointmentStatus
  message   String
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========== MEDICAL HISTORY ==========

model MedicalRecord {
  id        String   @id @default(uuid())
  userId    String   @unique
  history   String[]
  documents String[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ========== PAYMENT ==========

model Payment {
  id         String        @id @default(uuid())
  userId     String
  amount     Float
  method     PaymentMethod
  status     PaymentStatus
  paidAt     DateTime
  refundAt   DateTime?
  invoiceUrl String?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  UPI
  CARD
  NET_BANKING
  CASH
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
}

// ========== ANALYTICS (LOG TABLES) ==========

model AnalyticsLog {
  id        String   @id @default(uuid())
  event     String
  userId    String?
  createdAt DateTime @default(now())
  data      Json
}

// ========== INTEGRATION CONFIG ==========

model Integration {
  id      String  @id @default(uuid())
  name    String
  config  Json
  enabled Boolean @default(true)
}

// ========== API META ==========

model ApiMeta {
  id         String @id @default(uuid())
  version    String
  rateLimit  Int
  errorCodes Json
  docsUrl    String
}
